<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
</beans>
<!-- <beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	Root Context: defines shared resources visible to all other web components
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:XE"></property>
		<property name="username" value="springdb"></property>
		<property name="password" value="1234"></property>
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:/MybatisConfig.xml"></property>
		<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	<context:component-scan base-package="com.myweb.persistence" />
	<context:component-scan base-package="com.myweb.service" />
</beans> -->
<!-- DB연동에 필요한 환경설정 값 <util:properties id="dbConfig"> 데이터베이스 호스트 이름 <prop key="dbHost">localhost</prop> 데이터베이스 포트번호 <prop key="dbPort">3306</prop> 데이터베이스 이름 <prop key="dbName">bookfinder</prop> 데이터베이스 문자셋 <prop key="dbCharset">utf8</prop> 데이터베이스 계정명 <prop key="dbUsername">root</prop> 데이터베이스 비밀번호 <prop key="dbPassword">qwer123456</prop> Mapper 파일들이 위치할 '/src/main/resources' 하위의 경로 <prop key="mapperPath">/mappers/**/*Mapper.xml</prop> </util:properties> WebHelper 주입 설정 <bean id="webHelper" class="com.BookFinder.helper.WebHelper"> 
	<property name="encType" value="#{config['encType']}" /> <property name="uploadDir" value="#{config['uploadDir']}" /> <property name="uploadPath" value="#{config['uploadPath']}" /> <property name="uploadMaxFileSize"> <value type="java.lang.Long"> #{config['uploadMaxFileSize']} </value> </property> <property name="domain" value="#{config['domain']}" /> </bean> RegexHelper 주입 설정 <bean id="regexHelper" class="com.BookFinder.helper.RegexHelper" /> RetrofitHelper 주입 설정 <bean id="retrofitHelper" class="com.BookFinder.helper.RetrofitHelper" 
	/> 메일 발송에 필요한 정보를 저장하는 객체 정의 <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> <property name="host" value="#{config['smtpHost']}" /> <property name="port" value="#{config['smtpPort']}" /> <property name="username" value="#{config['smtpUsername']}" /> <property name="password" value="#{config['smtpPassword']}" /> <property name="defaultEncoding" value="#{config['encType']}" /> <property name="javaMailProperties"> <props> <prop key="mail.smtp.starttls.enable">true</prop> 
	<prop key="mail.smtp.auth">true</prop> <prop key="mail.smtp.debug">true</prop> <prop key="mail.smtp.socketFactory.port">#{config['smtpPort']}</prop> <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop> <prop key="mail.smtp.socketFactory.fallback">false</prop> </props> </property> </bean> Mail Helper 주입 설정 <bean id="mailHelper" class="com.BookFinder.helper.MailHelper"> <constructor-arg ref="mailSender" /> </bean> Upload를 위한 Multipart 지원 라이브러리 주입 <bean id="multipartResolver" 
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 업로드 최대 용량 (-1로 지정할 경우 제한없음) <property name="maxUploadSize" value="#{config['uploadMaxFileSize']}" /> 업로드를 처리할 인코딩 방식 <property name="defaultEncoding" value="#{config['encType']}" /> 업로드에서 사용할 최대 메모리 크기 (-1로 지정할 경우 제한없음) <property name="maxInMemorySize" value="-1" /> </bean> ======= DATABASE 연동 설정 ======= JDBC 객체 생성 <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> <property name="driverClassName" 
	value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" /> <property name="url" value="jdbc:log4jdbc:mysql://#{dbConfig['dbHost']}:#{dbConfig['dbPort']}/#{dbConfig['dbName']}?characterEncoding=#{dbConfig['dbCharset']}&amp;serverTimezone=UTC" /> <property name="username" value="#{dbConfig['dbUsername']}" /> <property name="password" value="#{dbConfig['dbPassword']}" /> </bean> SQLSessionFactory 객체 생성 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> JDBC 객체를 dataSource에 대한 setter 
	메서드를 통해 주입 <property name="dataSource" ref="dataSource" /> MyBatis Mapper 파일들에 대한 경로 패턴 주입 <property name="mapperLocations" value="classpath:#{dbConfig['mapperPath']}" /> </bean> SQLSession 객체 생성. 이 객체가 Service 패턴에 주입된다. <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache"> 생성자를 통해 SQLSessionFactory 객체 주입 <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" /> </bean> </beans> -->